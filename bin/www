#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../src/app')
const debug = require('debug')('node:server')
const http = require('http')
const mongoose = require('mongoose')
const interfaces = require('os').networkInterfaces()

const port = normalizePort(process.env.PORT)
app.set('port', port)

const server = http.createServer(app)

server.listen(port, async () => {
	console.log(process.env.MONGODB)
	await mongoose.connect(process.env.MONGODB)
	const networkIPs = getNetWorkIP()
	console.log(`Local：  http://localhost:${process.env.PORT}`)
	networkIPs.forEach(ip => {
		console.log(`Network：http://${ip}:${process.env.PORT}`)
	})
})
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10)

	if (isNaN(port)) {
		// named pipe
		return val
	}

	if (port >= 0) {
		// port number
		return port
	}

	return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error
	}

	const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges')
			process.exit(1)
			break
		case 'EADDRINUSE':
			console.error(bind + ' is already in use')
			process.exit(1)
			break
		default:
			throw error
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address()
	const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
	debug('Listening on ' + bind)
}

//获取本机网络ip
function getNetWorkIP() {
	const addressList = []

	for (var devName in interfaces) {
		interfaces[devName].forEach(details => {
			if (details.family === 'IPv4' && details.address !== '127.0.0.1' && !details.internal) {
				addressList.push(details.address)
			}
		})
	}

	return addressList
}
